# name: Build your PR
# on:
#   pull_request:
#     tags: buildpr-v1.*

# jobs:
#   build:
#     env:
#       MIX_PUSHER_APP_KEY: ${{ secrets.STAGING_MIX_PUSHER_APP_KEY }}
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v1

#       - name: Set generated env vars
#         id: vars
#         run: |
#           echo ::set-output name=sha::$(echo ${GITHUB_SHA} | cut -c1-8)
#           echo ::set-output name=prno::$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
#           echo ::set-output name=gitref::$(echo ${GITHUB_REF} )

#       - name: Use Node.js 12.x
#         uses: actions/setup-node@v1
#         with:
#           node-version: 12.x

#       - name: Get Composer Cache Directory
#         id: composer-cache
#         run: |
#           echo "::set-output name=dir::$(composer config cache-files-dir)"

#       - name: Cache Composer
#         uses: actions/cache@v1
#         with:
#           path: ${{ steps.composer-cache.outputs.dir }}
#           key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
#           restore-keys: |
#             ${{ runner.os }}-composer-

#       - name: Install composer dependencies
#         run: composer install --prefer-dist

#       - name: Cache NPM
#         uses: actions/cache@v1
#         with:
#           path: ~/.npm
#           key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
#           restore-keys: |
#             ${{ runner.os }}-node-

#       - name: Install npm dependencies
#         run: npm install

#       - name: Run Mix
#         run: npm run dev

#       - name: Login to ECR
#         id: ecr
#         uses: jwalton/gh-ecr-login@v1
#         with:
#           access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           region: eu-west-2

#       - name: Build NGINX
#         run: docker build -f infrastructure/docker/nginx/Dockerfile -t ${{ steps.ecr.outputs.account }}.dkr.ecr.eu-west-2.amazonaws.com/cashcalc/nginx:${{ steps.vars.outputs.sha }} .

#       - name: Push NGINX
#         run: |
#           docker push ${{ steps.ecr.outputs.account }}.dkr.ecr.eu-west-2.amazonaws.com/cashcalc/nginx:${{ steps.vars.outputs.sha }}

#       - name: Build PHP
#         run: docker build -f infrastructure/docker/php/Dockerfile -t ${{ steps.ecr.outputs.account }}.dkr.ecr.eu-west-2.amazonaws.com/cashcalc/php:${{ steps.vars.outputs.sha }} .

#       - name: Push PHP
#         run: |
#           docker push ${{ steps.ecr.outputs.account }}.dkr.ecr.eu-west-2.amazonaws.com/cashcalc/php:${{ steps.vars.outputs.sha }}

#       - name: Replace Image Version
#         run: find ./infrastructure/k8s/branches -type f -name "*.yaml" -print0 | xargs -0 sed -i "s/__IMAGEVERSION__/${{ steps.vars.outputs.sha }}/"

#       - name: Replace Namespace
#         run: find ./infrastructure/k8s/branches -type f -name "*.yaml" -print0 | xargs -0 sed -i "s/__NAMESPACE__/pr-${{ steps.vars.outputs.prno }}/"

#       - name: Replace Release Name
#         run: find ./infrastructure/k8s/branches -type f -name "*.yaml" -print0 | xargs -0 sed -i "s/__RELEASE__/pr-${{ steps.vars.outputs.prno }}/"

#       - name: Replace FQDN
#         run: find ./infrastructure/k8s/branches -type f -name "*.yaml" -print0 | xargs -0 sed -i "s/__FQDN__/pr-${{ steps.vars.outputs.prno }}.cashcalc.dev/"

#       - name: Publish Kube Files
#         uses: actions/upload-artifact@v2
#         with:
#           name: ${{ steps.vars.outputs.gitref }}
#           path: infrastructure/k8s/branches/

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
#       - name: Download Kube Files
#         uses: actions/download-artifact@v2
#         with:
#           name: ${{ steps.vars.outputs.gitref }}

#       - name: Make Kubeconfig folder
#         run: mkdir -p ~/.kube

#       - name: Generate Kube Config
#         run: echo ${{ secrets.SANDBOX_KUBE_CONFIG }} | base64 -d > ~/.kube/config

#       - name: Get IAM Authenticator
#         uses: prepor/action-aws-iam-authenticator@master

#       - run: aws-iam-authenticator version

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.SANDBOX_AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.SANDBOX_AWS_SECRET_ACCESS_KEY }}
#           aws-region: eu-west-2

#       - name: Remove Namespace File
#         run: rm -f namespace.yaml

#       - name: Deploy Environment
#         run: kubectl apply -f . || true